/**
 * Script de test pour v√©rifier le syst√®me de v√©rification des acceptations CGU et r√®glement
 */

import { User, Topic, Post, Section, Category } from "./models/index.js";
import { checkAndUpdateAcceptances } from "./utils/acceptanceChecker.js";
import sequelize from "./config/database.js";

async function runTests() {
  try {
    console.log("\nüß™ Test du syst√®me de v√©rification des acceptations\n");

    // Cr√©er une cat√©gorie de test
    console.log("1Ô∏è‚É£ Cr√©ation de la cat√©gorie de test...");
    const category = await Category.create({
      name: "Informations",
      slug: "informations",
      description: "Cat√©gorie de test",
      order: 1,
    });

    // Cr√©er une section de test
    console.log("2Ô∏è‚É£ Cr√©ation de la section de test...");
    const section = await Section.create({
      name: "R√®gles et CGU",
      slug: "regles-et-cgu",
      description: "Section de test",
      category_id: category.id,
      order: 1,
    });

    // Supprimer les anciens topics CGU et R√®glement s'ils existent et les recr√©er
    await Post.destroy({ where: { topic_id: (await Topic.findAll({ where: { slug: ["cgu", "reglement"] } })).map(t => t.id) } });
    await Topic.destroy({ where: { slug: ["cgu", "reglement"] } });

    // Cr√©er les topics CGU et R√®glement pour le test
    console.log("3Ô∏è‚É£ Cr√©ation des topics CGU et R√®glement...");
    const cguTopic = await Topic.create({
      title: "Conditions G√©n√©rales d'Utilisation",
      slug: "cgu",
      section_id: section.id,
      author_name: "Admin",
    });

    const reglementTopic = await Topic.create({
      title: "R√®glement du Forum",
      slug: "reglement",
      section_id: section.id,
      author_name: "Admin",
    });

    // Cr√©er les posts initiaux
    console.log("4Ô∏è‚É£ Cr√©ation des posts initiaux...");
    const cguPost = await Post.create({
      content: "Version 1.0 des CGU",
      topic_id: cguTopic.id,
      author_name: "Admin",
    });

    const reglementPost = await Post.create({
      content: "Version 1.0 du r√®glement",
      topic_id: reglementTopic.id,
      author_name: "Admin",
    });

    console.log(`   ‚úì Post CGU cr√©√© √†: ${cguPost.updated_at}`);
    console.log(`   ‚úì Post R√®glement cr√©√© √†: ${reglementPost.updated_at}`);

    // Cr√©er un utilisateur de test
    console.log("\n5Ô∏è‚É£ Cr√©ation d'un utilisateur de test...");
    const user = await User.create({
      username: "test_user_acceptance",
      email: "test_acceptance@test.com",
      password_hash: "hash",
      terms_accepted: true,
      terms_accepted_at: new Date(),
      forum_rules_accepted: true,
      forum_rules_accepted_at: new Date(),
    });

    console.log(`   ‚úì Utilisateur cr√©√© avec acceptations √†: ${user.terms_accepted_at}`);

    // Test 1: V√©rifier que rien ne change si pas de mise √† jour
    console.log("\n6Ô∏è‚É£ Test 1: Pas de mise √† jour des posts");
    await checkAndUpdateAcceptances(user);
    await user.reload();
    console.log(`   ‚úì terms_accepted: ${user.terms_accepted}`);
    console.log(`   ‚úì forum_rules_accepted: ${user.forum_rules_accepted}`);

    if (user.terms_accepted && user.forum_rules_accepted) {
      console.log("   ‚úÖ Test 1 r√©ussi: Les acceptations restent valides");
    } else {
      console.log("   ‚ùå Test 1 √©chou√©: Les acceptations ont √©t√© modifi√©es");
    }

    // Test 2: Mettre √† jour le post CGU et v√©rifier
    console.log("\n7Ô∏è‚É£ Test 2: Mise √† jour du post CGU");
    await new Promise((resolve) => setTimeout(resolve, 1000)); // Attendre 1s pour avoir une diff√©rence de date
    await cguPost.update({ content: "Version 2.0 des CGU" });
    await cguPost.reload();
    console.log(`   ‚úì Post CGU mis √† jour √†: ${cguPost.updatedAt}`);
    console.log(`   ‚úì Utilisateur a accept√© √†: ${user.terms_accepted_at}`);
    console.log(`   ‚úì Comparaison: ${new Date(cguPost.updatedAt)} > ${new Date(user.terms_accepted_at)} = ${new Date(cguPost.updatedAt) > new Date(user.terms_accepted_at)}`);

    await checkAndUpdateAcceptances(user);
    await user.reload();
    console.log(`   ‚úì terms_accepted: ${user.terms_accepted}`);
    console.log(`   ‚úì terms_accepted_at: ${user.terms_accepted_at}`);

    if (!user.terms_accepted && user.terms_accepted_at === null) {
      console.log("   ‚úÖ Test 2 r√©ussi: L'acceptation CGU a √©t√© invalid√©e");
    } else {
      console.log("   ‚ùå Test 2 √©chou√©: L'acceptation CGU devrait √™tre invalid√©e");
    }

    // Test 3: Mettre √† jour le post R√®glement et v√©rifier
    console.log("\n8Ô∏è‚É£ Test 3: Mise √† jour du post R√®glement");
    await new Promise((resolve) => setTimeout(resolve, 1000)); // Attendre 1s
    await reglementPost.update({ content: "Version 2.0 du r√®glement" });
    console.log(`   ‚úì Post R√®glement mis √† jour √†: ${reglementPost.updated_at}`);

    await checkAndUpdateAcceptances(user);
    await user.reload();
    console.log(`   ‚úì forum_rules_accepted: ${user.forum_rules_accepted}`);
    console.log(`   ‚úì forum_rules_accepted_at: ${user.forum_rules_accepted_at}`);

    if (!user.forum_rules_accepted && user.forum_rules_accepted_at === null) {
      console.log("   ‚úÖ Test 3 r√©ussi: L'acceptation du r√®glement a √©t√© invalid√©e");
    } else {
      console.log("   ‚ùå Test 3 √©chou√©: L'acceptation du r√®glement devrait √™tre invalid√©e");
    }

    // Nettoyage
    console.log("\n9Ô∏è‚É£ Nettoyage des donn√©es de test...");
    await user.destroy();
    await cguPost.destroy();
    await reglementPost.destroy();
    await cguTopic.destroy();
    await reglementTopic.destroy();
    await section.destroy();
    await category.destroy();
    console.log("   ‚úì Nettoyage termin√©");

    console.log("\n‚úÖ Tous les tests sont termin√©s!\n");
  } catch (error) {
    console.error("\n‚ùå Erreur lors des tests:", error);
  } finally {
    await sequelize.close();
  }
}

runTests();
